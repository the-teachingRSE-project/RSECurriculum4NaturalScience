---
title: "Research Software Engineering for Natural Sciences"
author: ["Max Mustermann"]
format:
    pdf:
        template: quarto-swt-template.tex
        classoption: [twocolumn, german, biblatex]
        cite-method: biblatex
        keep-tex: true
        pdf-engine: pdflatex
        biblio-style: lni
        bibliography: my-paper.bib
        include-in-header:
        - text: |
            $highlighting-macros$
        tables:
            longtable: false
editor: 
  markdown: 
    wrap: 72
---

# Introduction

The term Research Software Engineer (RSE) has become a label
for specific technical job roles in universities and research institutions.
It relates people doing work that includes elements of traditional software engineering
but also rests on a broad spectrum of skills from neighbouring domains
such as scientific computing, data science, research data management, and the open science movement in general
as well as skills that have not been packaged into elements of established curricula in formal education yet.

Software engineering as a discipline has evolved, over the past four decades,
into a mature field with a large body of knowledge that includes
methods, theory, codes of practice and well developed sub-fields.
Established curricula in degree programs produce practitioners of a well defined engineering profession.

The much younger community of RSE professionals to a large extent consists of people with no formal software engineering education.
It has been realized that the increasing importance of
computational science, complexity, demands, size of teams, number of collaboration partners
and generally the need for more ambitious software projects
calls for a better and more systematic making use of knowledge and skills from software engineering.
This is especially true for natural sciences (from here on "sciences"),
where RSEs' expertise often focuses on very specialized technical problem-solving in close conjunction with a specific research question
at the expense of the larger picture and mastery of more general concepts.

A disconnect between scientific computing and software engineering practitioners and communities has been already observed by @kelly2007.
We aim to improve the situation in the spirit of her conclusion,
which urges the scientific community to better apply the current solutions offered by the software engineering community
and the latter to better cater to the sciences as an application domain.
Thus, the idea of introducing a master curriculum for research software engineering for natural sciences was born.
Establishing this formal training in Research Software engineering(RSEng) will raise specialists that can fill a vacuum for computational specialists in the sciences.
On the one hand, those RSEs should be firmly grounded in software engineering and assume practices and the mindset of a software engineer.
On the other hand, these RSEs should develop a deep understanding of computational scientific work and the relevant methods and practices.
They should assume a specific professional identity that also includes the self-image of a scientist with the associated values and practices, functions and is recognized as an equal member of a domain research team.

The research question of this paper is "What is the identity needed for
students to be accepted and feel as qualified software engineers
but also be  intellectually connected to the natural sciences?". In other
words: what is the special relationship between natural sciences and
computing historically, and how does it relate to software engineering
foundations. In order to answer this question the paper is structured as
follows: (1) the history of natural science and computing (2) the
history of software engineering as it relates to research. (3) What
is the common core that should be the identity of a research software
engineer? (4) How does the ideal identity of a research software engineer
inform the planned curriculum for research software engineering?




# What is the history of natural science and computing?

_Here we explain, why Natural sciences and means of computation are
linked _

TODO: check if the content is still valid after rephrasing it with AI
for the purpose of this paper:

From their origins in the Renaissance, the natural sciences have been
intertwined with computation. Early pioneers like Kepler and
Galileo not only measured natural phenomena but sought mathematical laws
to describe them—laws that enabled prediction. This marked the beginning
of a fundamental trait of natural science: the drive to quantify and
predict nature, constrained only by the available means of computation.

Throughout history, computational tools—from early mechanical
calculators like Pascal’s Pascaline to Babbage’s visionary Analytical
Engine—emerged alongside the growing ambitions of science [@bromley2008charles].

In the 20th century, particularly during World War II, modern computing
was born out of scientific necessity. Machines like Zuse’s Z3 in Germany
[@Zuse1986], the British COLOSSUS [@Copeland2004], and the American
ENIAC [@Burks1981] were built not only to support military operations
but also to solve scientific and engineering problems of increasing
complexity.

This wartime acceleration of computation laid the groundwork for the
post-war integration of computing into everyday scientific practice. The
development of high-level programming languages like FORTRAN by John
Backus and his team at IBM [@Backus1978] enabled scientists to express
algorithms independently of hardware, transforming how they interacted
with computation.

By the 1960s, with the advent of the CDC 6600—the first
supercomputer—designed by Seymour Cray [@Kaufmann1994], computation had
become central to the scientific method. Vectorized processors and
increasing speed meant that simulation and modeling could now
complement, and sometimes replace, physical experimentation.

Computation has since permeated nearly every field of natural science,
often giving rise to entire sub-disciplines:

-   Chemistry: computational chemistry
-   Physics: computational physics, especially astrophysics
-   Physical chemistry: cheminformatics
-   Biology: bioinformatics, biostatistics, computational biology,
    computational bio-modeling
-   Medicine: digital medicine, computer-aided drug design
-   Earth science: weather forecasting, Earth system modeling (climate,
    ocean, cryosphere, landscape), magneto-hydrodynamic simulation of
    the Earth’s core, geo-electric simulations (e.g., for resource
    exploration or space weather), seismic processing (e.g., earthquake
    prediction, subsurface imaging), and geographic information systems
    (GIS)

Today, at least some computational skills are needed in most fields of natural sciences.
The development of computational tools is not just a support activity;
it defines how science is practiced, scaled, and extended.

## A small History of Software Engineering and Research Applications

_Here we explain, where Software Engineering comes from, and where
and why it deviated from its co-development with science_

After the second World War the Apollo Program was a major driver in
enhancing the quality of mission-critical software.
In this setting the term 'software engineering' was coined[@Randell1979]
and two well-known NATO conferences were held in 1968[@Naur1969] and
1969[@Buxton1970] to discuss how to keep software projects reliable and in time.
While good programming practices were already circulating as soon as 1961[@Hosier1961],
these NATO conferences shed light on the 'software crisis'[@Randell1979].
Adoption of best coding practices was slow[@Boehm1979], with calls to reform
not just programming techniques but also programming culture[@Weinberg1971; @Boehm1979],
e.g. by promoting software documentation and teamwork over lone coders
with full knowledge of the codebase[@Weinberg1971, p. 100]
(with an early formulation[@Weinberg1971, p. 114] of what is now known
as the 'bus factor'[@Zazworka2010; @Jabrayilzade2022]).
The notion of the quality and reliability of software
continued to be a driving force of software engineering with the
ever-increasing use of software in safety-critical systems
(e.g. medicine or aviation), which meant that software could kill, in the 70s and 80s.
The next big projects was the development of modern general purpose
operating systems in the late 80s, which combined with affordable
personal computers, helped democratize the use and development of
research software for lab instrument control, data acquisition,
and statistical analysis[@Robinson1984].
The advent of the Internet added another level of complexity,
since new modes of operation for software across multiple computers are possible.
In 2005, the Software Engineering Body of Knowledge (SWEBOK) was created
to document foundational competencies of SEs[@SWEBOK2005]
and design academic curricula[@Fairley2014].

In the 2000s, the SE community identified a special case of software users nicknamed
'professional end-user developers'[@Segal2005; @Segal2007; @Segal2009b].
Most of the interviews were conducted with scientists and revealed the difficulties
of reconciling research practices with software engineering practices[@Segal2005; @Segal2009; @Lawrence2006; @Wood2003; @Storer2017].
In parallel, science communities also identified a new role centered around research software[@Baxter2006],
although the term 'research software engineer' wouldn't be coined until 2012[@Baxter2012].

## Research Software Engineering for Natural Sciences

[ Recent trends in the sciences and the organization of science have incurred the need to incorporate
practices from software engineering that hitherto have been neglected in science  ]

__also connect the arguments below to history paragraphs_
- growth of research groups requires a more systematic approach to workflows and team organization 
- funding requirements: software development needs to be made transparent, documented and tracked in order justify funding and quantify development cost.
- increasing demands for reproducible computing in response to
  - the "replication crisis" [@Pashler2012]
  - requirements to honour the FAIR principles [@Hutton2016; @Stagge2019; @Stodden2018]
- increasing demands for reliability of research software
  - __Glaubwürdigkeitkrise der Wissenschaft_
  - check bug references [@Miller2006Xray; @Smart2018] (or both [@Miller2016fMRI]),
- needs to the standardization of scientific development processes [@Sandve2013; @Junk2020]
- pressure to consider environmental impact of scientific computing [@lannelongue2023] 
- a trend toward transdisciplinary projects leads to more complex requirements due to a more heterogeneous set of stakeholders.
- the emerging use of large language models in software development processes requires that the latest results from software engineering research are considered.


 XXXXXXXXXX hier weiter XXXXXXXXXXXXXXXXXXXXXXX
[ Why traditional software engineers won't cut it ]

- lack of depth of domain specific knowledge 
- lack of understanding handling cultural complexities in research organizations
- managing the sustainability and community in fast changing teams

While the historical separation between computing in science and in software engineering may seem logical at first glance, recent developments increasingly challenge this divide.
Scientific work now faces growing demands that align closely with established software engineering principles. These include the need for transparent and auditable software contributions to justify funding, standardized development processes driven by the reproducibility crisis, and an emphasis on energy efficiency in response to the climate crisis.
Furthermore, the growing complexity of research, the rise of transdisciplinary collaboration, and the integration of advanced technologies like large language models have introduced intricate software pipelines across disciplines.
Together, these trends highlight the convergence of scientific computing and software engineering practices.


_Here we look forward to the challenges for (natural) science and
why we can only move forward by putting more emphasis on SE techniques, _

XXXXXXX bis hier XXXXXXXXXXXXXXXXXXXXXXX
XXXXXXX Übergang XXXXXXXXXXXXXXXXXXXXXXX

Classical software engineering and computing for the sciences have drifted apart
as some influencing factors have developed differently over time.
These differences can be illustrated with (at least three) structural dichotomies:

- fast prototyping / short term  vs. long-term software growth
- internalized knowledge vs. externalized knowledge
- mathematically-driven modelling vs. human-driven modelling

[Lack of overlap SE / RSE cause by software often one-shot, for personal growth (qualification) as opposed to growth of organization]
Scientific academic culture is characterized by a rapidly changing environment and the pressure to publish frequently.
This also means that software is often developed and maintained only during a single PhD project.
Instead of prototyping in order to prepare a blueprint that a larger team of engineers can use to build a well-designed and sound product, research-oriented software often remains in the prototype stage. Therefore duplication of effort, or "reinventing the wheel", has been documented in research software [@Smith2024].
To counteract this trend, funding agencies have created incentives to consolidate fragmented domain codes by prioritizing research software
that is easily extensible and re-usable in different contexts with minimally-invasive adaptations [@DFG2022RSE].

[ Adaption needed I ]
The need for flexibility in scientific software development in principle lends itself ideally
to the application of agile methods. Therefore this situation calls for an injection of
professional SE-Know-How in that area. However the tradition agile development methodologies
(Scrum, Kanban,.. ) are presented for large team and large industry-style projects. An adaption
f these practices to small and even 1-person teams would be a useful part of an RSE4NatSci-curriculum]
This specific case shows that SE techniques in general cannot be applied to the research context without adaptions.

[ Adaption needed II ]
Testing. Often testing can not be handled by external
parties since a high level of domain-specific knowledge is required to construct suitable
tests. On the other hand, formal testing is often less important for scientific code developed
and used by one single person in an iterative manner. A systematic testing strategy tailored to these condition is needed.

[Adaptions needed III ]
However, abstractions can lead to overhead for small developer teams typical to research contexts [@Lawrence2006].

[Some SE processes are not applicable in NatSci]
From requirements engineering, to prototyping and evaluation, the social sciences and psychology have played a role in connecting craftsmanship of an engineer to the intricacies of big human teams, customers and stakeholders [find something that talks about human computer interaction and software engineering.

Another aspect that distinguishes the typical software process design from research software engineering is the ambition of externalizing all knowledge that is contained in the software.
In an industrial setting where programmers need to be replaceable this is an essential factor of effectiveness [@gronau2006kmdl].
In the natural sciences in contrast, application code is often based on state-of-the-art mathematical models that are only accessible to very few specialized researchers.

[Some SE topics should be taken up by RSEs4NatSci unchanged]
SOLID principles, design patterns, .....



## A RSE Master Curriculum

Taking the historical trend into consideration it becomes apparent that the traditional division of labor between software engineers and computational scientists is no longer appropriate for today's challenges.
As Research Software Engineering starts to combine software engineering and science again, therby reversing the historical trend, the question arises which disciplinary identity a research software engineer should have.

We argue that neither additional traing in a natural science for software engineers nor vice versa would be suited for the development of an adequate professional identity. For example an SE-curriculum augmented with physics courses within the typical timeframe alloted for a masters degree will not be sufficent for a student to accumulate the exposure, knowledge and experience necessary to develop a physicist's identity in addition to her SE identity. As @gomez2025 observe, a new discipline is required for a new professional identity aquired through formal academic education. 

Similar to data scientists, data stewards and other modern job roles, a research engineer for the natural sciences is not a niche innovation based on a short-living trend.
The newly formed identity should encompass key competences from both fields, be rooted in the history and culture of both SE and natural sciences while including new competencies that arise from the special requirements for typical RSE work.

Based on the previous discussion and workshops with the RSE-community [add citation to deRSE] the curriculum should contain three parts:

1. software engineering foundation and required computer science modules
   - here a selection of topics from SE is taught. E.g. Computer Architecture,
     Visualization, Distributed Systems, Software Architecture. (Selection from Uni Stuttgart, SE Master)
   - a homework project on Software Engineering (could be done in the domain)
2. a firm background in natural science methods
   - a continuation of the theoretical foundations with the goal of exposing the students to modern research
   - further lab work (maybe electronics lab?), since it is the foundation of the empirical sciences
   - a high level of mathematical formal knowledge: linear algebra, ODEs and PDEs, FFTs, pattern matching
   - a domain specialization (towards the master)
3. an identity building group of modules that addresses key RSE issues such as ...
   - high performance computing
   - the role of simulation modelling in scientific practice
   - numerical methods
   - machine learning methods
   - reproducibility hackathon practical course
   - the scientific method, epistemology and ethics
   - history of software engineering in science
   - research software engineering research [@felderer2025]
   - interpersonal competencies
   - research data management and good scientific practice
   - the open source software community of practice
   - distributed research infrastructure technologies 

This set of skills makes the RSE a professional who is able to take a set of
equations from a modern theory, implement them, create a reliable and
reusable program and maintain a successful software-project for the academic
world around it.

## Conclusion

Natural Sciences have a long history of using computing devices in order to enhance the predictive power of their theories.
But in order to move the frontiers of knowledge, inspired individuals in the natural sciences often
work and innovate outside of standard operating procedures.
With the advent of the computer, the subliminal application of techniques and technologies
from SE has been sufficient in the recent past up to the present,
to improve the efficiency of these individual scientists creating software.
But the availability of ever more computing resources will require a control
of the complexity of deeper technology stacks and it will require larger forms
of organisation in order to drive progress in the natural sciences forward in the future.
Combined with external pressures to making Research Software FAIR we expect also in the natural sciences a transition to
more structured development processes.
The RSE in the Natural Sciences being at home in a natural science *and* in Software Engineering is located perfectly
to move science to a level of managing complexity of software project structures that would probably not be possible without SE alone.

Similar efforts are carried out in allied communities,
such as the RSE-HPC curriculum [@Filinger2025] by the UNIVERSE-HPC project,
the RSE curriculum for computer scientists [@Chourdakis2025] at the Technical University of Munich,
the Simulation Software Engineering course [@Uekermann2021] at the University of Stuttgart,
or the Bachelor's and Master's program "Simulation Technology" from the Cluster
of Excellence "Data-Integrated Simulation Science (SimTech)" [@SimTech2019]
for computer science students.
A RSE for Natural Sciences curriculum would also be of interest to train
natural science Ph.D. candidates in specific aspects of SE and RSE practices
relevant to their software applications, while also receiving academic credit
through their graduate school.
