---
title: "Research Software Engineering Competences for Natural Sciences"
author: ["Max Mustermann"]
format:
    pdf:
        template: quarto-swt-template.tex
        classoption: [twocolumn, german, biblatex]
        cite-method: biblatex
        keep-tex: true
        pdf-engine: pdflatex
        biblio-style: lni
        bibliography: my-paper.bib
        include-in-header:
        - text: |
            $highlighting-macros$
        tables:
            longtable: false
---

# Introduction

Research Software Engineering (RSE) has become a household name for the increasing demand and professionalized work profile of software engineers in research institutes, universities and research-oriented industry. Research Software Engineering includes aspects of Scientific Computing and Data Science but has been rebranded to include the last 30 to 50 years of advances in software engineering techniques (Softwaretechnik): with growing sizes of scripts, models and programming teams in the sciences, engineering aspects that used to be targeted at large-scale industry applications become more and more relevant for the sciences. This is especially true for natural sciences (from here on "sciences") as the developing circles have not intersected with industry as much as other computational fields such as data science. This progress was further hindered by a growing chasm between software engineering and scientific computing research, practitioners and communities [@kelly_software_2007]. Thus, the idea of introducing a master curriculum for research software engineering was born in order to bridge the gap by training a new generation of software engineers that can connect to the computational sciences.

The research question of this paper is what is the identity needed for students to be both be accepted and feel as qualified software engineers but also be connect intellectually to the natural sciences. In other words: what is special relationship between natural sciences and computing historically, and how does it relate to software engineering foundations. In order to answer this question the paper is structured as follows: (1) the history of natural science and computing (2) the history of software engineering as it relates to research and (3) what is the common core that should be the identity of a research software engineer (4) how does the ideal identity of a research software engineer informs the planned curriculum for research software engineering.

# What is the history of natural science and computing?

** Here we explain, why Natural sciences and means of computation are linked **

TODO: check if the content is still valid after rephrasing it with AI for the purpose of this paper:

From their origins in the Renaissance, the natural sciences have been deeply intertwined with computation. Early pioneers like Kepler and Galileo not only measured natural phenomena but sought mathematical laws to describe them—laws that enabled prediction. This marked the beginning of a fundamental trait of natural science: the drive to quantify and simulate nature, constrained only by the available means of computation.

Throughout history, computational tools—from early mechanical calculators like Pascal’s Pascaline to Babbage’s visionary Analytical Engine—emerged alongside the growing ambitions of science [@pascaline; @babbage].

In the 20th century, particularly during World War II, modern computing was born out of scientific necessity. Machines like Zuse’s Z3 in Germany [@Zuse1986], the British COLOSSUS [@Copeland2004], and the American ENIAC [@Burks1981] were built not only to support military operations but also to solve scientific and engineering problems of increasing complexity.

This wartime acceleration of computation laid the groundwork for the post-war integration of computing into everyday scientific practice. The development of high-level programming languages like FORTRAN by John Backus and his team at IBM [@Backus1978] enabled scientists to express algorithms independently of hardware, transforming how they interacted with computation.

By the 1960s, with the advent of the CDC 6600—the first supercomputer—designed by Seymour Cray [@Kaufmann1994], computation had become central to the scientific method. Vectorized processors and increasing speed meant that simulation and modeling could now complement, and sometimes replace, physical experimentation.

Computation has since permeated nearly every field of natural science, often giving rise to entire subdisciplines:

- Chemistry: computational chemistry
- Physics: computational physics, especially astrophysics
- Physical chemistry: cheminformatics
- Biology: bioinformatics, biostatistics, computational biology, computational biomodeling
- Medicine: digital medicine, computer-aided drug design
- Earth science: weather forecasting, Earth system modeling (climate, ocean, cryosphere, landscape), magneto-hydrodynamic simulation of the Earth’s core, geo-electric simulations (e.g., for resource exploration or space weather), seismic processing (e.g., earthquake prediction, subsurface imaging), and geographic information systems (GIS)


Today, the identity of the natural scientist is inseparable from the ability to compute. The development of computational tools is not just a support activity; it defines how science is practiced, scaled, and extended.

## A small History of Software Engineering
** Here we explain, where Software Engineering comes from, and where and why it deviated from its co-development with science **

After the second World War the Apollo Program was a major driver in enhancing the quality of software
of mission-critical software. In this setting the term Software Engineering was coined and two well-known
conferences were held in 1968 and 1969 to discuss how to keep software projects reliable and in time.
The notion of the quality and reliability of software continued to be a driving force of software engineering
with the ever-increasing use of software in safety critical systems (e.g. medicine), which meant that software could kill, in the 70s and 80s.
The next big projects was the development of modern general purpose operating systems in the late 80s.
The advent of the Internet added another level of complexity, since new modes of operation for software across multiple computers are possible.

TODO: How did SE develop and the shift to research software engineering

The professional identity of a software engineer has developed

## Why do we need to bring it together
** Here we look forward to the challenges for (natural) science and why we can only move forward by putting more emphasis on SE techniques **

Science has always had a need for bigger means of computation, but wasn't exposed as much to the question of reliability as other software was outside of academia.
This led to a negligence of aspects of SE that tried to increase a software's reliability by managing it's complexity.
- funding/ transparency (Organisation wie Geld wohin geht. Und wann. Und warum.)
- standardization of Development Process
- efficiency 
- Complexity in organization of science
- Transdisciplinary research 
- Interaction with more users (More means of communication)
- Interaction with external IT Systems (Ever-present cloud system)
- maybe Big Data?

We argue, that science has always needed the biggest computational devices possible. But with the now increased complexity, and the easier use of our software in applications
in other scientists users, the reliability of our software becomes of a far bigger concern. Therefore, questions that have been asked by Business users
to software developers decades ago, now also become relevant for science, too. This necessitates to bring SE and Research closer together.

## What are science-specific SE competencies?
** We conclude with the competencies required for RSE in natural sciences and derive them from the historic overview and the future challenges **

- high level of mathematical formal knowledge: We see a need for Linear Algebra, ODEs and PDEs, FFTs, Pattern Matching
- SE enables organization of big projects
- handling complexities in organization
- managing the sustainability of an (Open Source) Project

## What should a MNT_RSE-Curriculum should look like?

This we can import from the Curriculum Project.
